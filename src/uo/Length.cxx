// SPDX-License-Identifier: GPL-2.0-only
// author: Max Kellermann <max.kellermann@gmail.com>

#include "Length.hxx"
#include "PacketStructs.hxx"
#include "uo/Command.hxx"
#include "util/ByteOrder.hxx"

#include <array>

/* packet length table borrowed from wolfpack */
static constexpr std::array<uint16_t, 0x100> packet_lengths{
	0x0068, 0x0005, 0x0007, 0x0000, 0x0002, 0x0005, 0x0005, 0x0007, // 0x00
	0x000e, 0x0005, 0x0007, 0x0007, 0x0000, 0x0003, 0x0000, 0x003d, // 0x08
	0x00d7, 0x0000, 0x0000, 0x000a, 0x0006, 0x0009, 0x0001, 0x0000, // 0x10
	0x0000, 0x0000, 0x0000, 0x0025, 0x0000, 0x0005, 0x0004, 0x0008, // 0x18
	0x0013, 0x0008, 0x0003, 0x001a, 0x0007, 0x0014, 0x0005, 0x0002, // 0x20
	0x0005, 0x0001, 0x0005, 0x0002, 0x0002, 0x0011, 0x000f, 0x000a, // 0x28
	0x0005, 0x0001, 0x0002, 0x0002, 0x000a, 0x028d, 0x0000, 0x0008, // 0x30
	0x0007, 0x0009, 0x0000, 0x0000, 0x0000, 0x0002, 0x0025, 0x0000, // 0x38
	0x00c9, 0x0000, 0x0000, 0x0229, 0x02c9, 0x0005, 0x0000, 0x000b, // 0x40
	0x0049, 0x005d, 0x0005, 0x0009, 0x0000, 0x0000, 0x0006, 0x0002, // 0x48
	0x0000, 0x0000, 0x0000, 0x0002, 0x000c, 0x0001, 0x000b, 0x006e, // 0x50
	0x006a, 0x0000, 0x0000, 0x0004, 0x0002, 0x0049, 0x0000, 0x0031, // 0x58
	0x0005, 0x0009, 0x000f, 0x000d, 0x0001, 0x0004, 0x0000, 0x0015, // 0x60
	0x0000, 0x0000, 0x0003, 0x0009, 0x0013, 0x0003, 0x000e, 0x0000, // 0x68
	0x001c, 0x0000, 0x0005, 0x0002, 0x0000, 0x0023, 0x0010, 0x0011, // 0x70
	0x0000, 0x0009, 0x0000, 0x0002, 0x0000, 0x000d, 0x0002, 0x0000, // 0x78
	0x003e, 0x0000, 0x0002, 0x0027, 0x0045, 0x0002, 0x0000, 0x0000, // 0x80
	0x0042, 0x0000, 0x0000, 0x0000, 0x000b, 0x0000, 0x0000, 0x0000, // 0x88
	0x0013, 0x0041, 0x0000, 0x0063, 0x0000, 0x0009, 0x0000, 0x0002, // 0x90
	0x0000, 0x001a, 0x0000, 0x0102, 0x0135, 0x0033, 0x0000, 0x0000, // 0x98
	0x0003, 0x0009, 0x0009, 0x0009, 0x0095, 0x0000, 0x0000, 0x0004, // 0xA0
	0x0000, 0x0000, 0x0005, 0x0000, 0x0000, 0x0000, 0x0000, 0x000d, // 0xA8
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0040, 0x0009, 0x0000, // 0xB0
	0x0000, 0x0003, 0x0006, 0x0009, 0x0003, 0x0000, 0x0000, 0x0000, // 0xB8
	0x0024, 0x0000, 0x0000, 0x0000, 0x0006, 0x00cb, 0x0001, 0x0031, // 0xC0
	0x0002, 0x0006, 0x0006, 0x0007, 0x0000, 0x0001, 0x0000, 0x004e, // 0xC8
	0x0000, 0x0002, 0x0019, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, // 0xD0
	0x0000, 0x010C, 0xFFFF, 0xFFFF, 0x0009, 0x0000, 0xFFFF, 0x0000, // 0xD8
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, // 0xE0
	0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0015, // 0xE8
	0x0000, 0x0009, 0xFFFF, 0x001a, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, // 0xF0
	0x006A, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, // 0xF8
};

static constexpr auto
MakePaketLengths6() noexcept
{
	auto pl = packet_lengths;
	pl[static_cast<std::size_t>(UO::Command::Drop)] = sizeof(struct uo_packet_drop_6);
	pl[static_cast<std::size_t>(UO::Command::ContainerUpdate)] = sizeof(struct uo_packet_container_update_6);
	return pl;
}

static constexpr auto packet_lengths_6 = MakePaketLengths6();

static constexpr auto
MakePaketLengths6014() noexcept
{
	auto pl = packet_lengths_6;
	pl[static_cast<std::size_t>(UO::Command::SupportedFeatures)] = sizeof(struct uo_packet_supported_features_6014);
	return pl;
}

static constexpr auto packet_lengths_6014 = MakePaketLengths6014();

static constexpr auto
MakePaketLengths7() noexcept
{
	auto pl = packet_lengths_6014;
	pl[static_cast<std::size_t>(UO::Command::ContainerOpen)] = sizeof(struct uo_packet_container_open_7);
	return pl;
}

static constexpr auto packet_lengths_7 = MakePaketLengths7();

static constexpr const auto &
GetPacketLengths(enum protocol_version protocol) noexcept
{
	switch (protocol) {
	case PROTOCOL_UNKNOWN:
		break;

	case PROTOCOL_5:
	case PROTOCOL_6:
		return packet_lengths_6;

	case PROTOCOL_6_0_5:
	case PROTOCOL_6_0_14:
		return packet_lengths_6014;

	case PROTOCOL_7:
		return packet_lengths_7;

	case PROTOCOL_COUNT:
		break;
	}

	return packet_lengths;
}

std::size_t
get_packet_length(enum protocol_version protocol,
		  const void *q, std::size_t max_length)
{
	if (max_length == 0)
		return 0;

	const uint8_t *p = (const uint8_t *)q;
	const uint8_t cmd = *p;

	std::size_t length = GetPacketLengths(protocol)[cmd];
	if (length == 0xffff)
		return PACKET_LENGTH_INVALID;

	if (length > 0)
		return length;

	if (max_length < 3)
		return 0;

	length = *(const PackedBE16*)(p + 1);
	if (length < 3 || length >= 0x8000)
		return PACKET_LENGTH_INVALID;

	return length;
}
